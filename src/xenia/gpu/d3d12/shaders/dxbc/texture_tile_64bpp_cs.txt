//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer XeTextureTileConstants
// {
//
//   uint xe_texture_tile_guest_base;   // Offset:    0 Size:     4
//   uint xe_texture_tile_endian_format_guest_pitch;// Offset:    4 Size:     4
//   uint xe_texture_tile_size;         // Offset:    8 Size:     4
//   uint xe_texture_tile_host_base;    // Offset:   12 Size:     4
//   uint xe_texture_tile_host_pitch;   // Offset:   16 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// xe_texture_tile_source            texture    byte         r/o      T0             t0      1 
// xe_texture_tile_dest                  UAV    byte         r/w      U0             u0      1 
// XeTextureTileConstants            cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[0:0][2], immediateIndexed, space=0
dcl_resource_raw T0[0:0], space=0
dcl_uav_raw U0[0:0], space=0
dcl_input vThreadID.xy
dcl_temps 6
dcl_thread_group 8, 32, 1
ushr r0.y, CB0[0][0].z, l(16)
mov r0.x, CB0[0][0].z
and r0.xy, r0.xyxx, l(0x0000ffff, 0x0000ffff, 0, 0)
ishl r1.x, vThreadID.x, l(2)
mov r1.y, vThreadID.y
uge r0.yz, r1.xxyx, r0.xxyx
or r0.y, r0.z, r0.y
if_nz r0.y
  ret 
endif 
ushr r0.y, CB0[0][0].y, l(9)
imad r2.xyzw, vThreadID.xxxx, l(4, 4, 4, 4), l(0, 1, 2, 3)
ubfe r0.zw, l(0, 0, 27, 29), l(0, 0, 3, 1), vThreadID.xxxx
ushr r1.yz, vThreadID.yyyy, l(0, 5, 2, 0)
iadd r0.y, r0.y, l(31)
ushr r0.y, r0.y, l(5)
imad r0.y, r1.y, r0.y, r0.z
and r3.xyzw, r2.xyzw, l(7, 7, 7, 7)
ishl r1.yw, vThreadID.yyyy, l(0, 2, 0, 7)
and r1.yw, r1.yyyw, l(0, 56, 0, 2048)
iadd r3.xyzw, r1.yyyy, r3.xyzw
ishl r3.xyzw, r3.xyzw, l(4, 4, 4, 4)
and r3.xyzw, r3.xyzw, l(960, 960, 992, 992)
bfi r3.xyzw, l(22, 22, 22, 22), l(10, 10, 10, 10), r0.yyyy, r3.xyzw
iadd r3.xyzw, r3.xyzw, l(0, 8, 0, 8)
bfi r4.xyzw, l(1, 1, 1, 1), l(4, 4, 4, 4), vThreadID.yyyy, r3.xyzw
ishl r5.xyzw, r3.xyzw, l(3, 3, 3, 3)
bfi r5.xyzw, l(1, 1, 1, 1), l(7, 7, 7, 7), vThreadID.yyyy, r5.xyzw
bfi r5.xyzw, l(12, 12, 12, 12), l(0, 0, 0, 0), r1.wwww, r5.xyzw
ishl r3.xyzw, r3.xyzw, l(2, 2, 2, 2)
bfi r3.xyzw, l(1, 1, 1, 1), l(6, 6, 6, 6), vThreadID.yyyy, r3.xyzw
and r3.xyzw, r3.xyzw, l(1792, 1792, 1792, 1792)
iadd r3.xyzw, r5.xyzw, r3.xyzw
and r0.y, r1.z, l(2)
iadd r0.y, r0.y, r0.w
bfi r0.y, l(2), l(6), r0.y, l(0)
iadd r3.xyzw, r3.xyzw, r0.yyyy
and r4.xyzw, r4.xyzw, l(16, 24, 48, 56)
iadd r3.xyzw, r3.xyzw, r4.xyzw
iadd r3.xyzw, r3.xyzw, CB0[0][0].xxxx
ult r0.xyz, r2.yzwy, r0.xxxx
imad r0.w, vThreadID.y, CB0[0][1].x, CB0[0][0].w
ishl r1.x, r1.x, l(3)
iadd r0.w, r0.w, r1.x
ld_raw r1.xyzw, r0.w, T0[0].xyzw
and r2.x, CB0[0][0].y, l(4)
if_nz r2.x
  mov r1.xyzw, r1.yxwz
  mov r2.y, l(2)
else 
  mov r2.y, CB0[0][0].y
endif 
ushr r2.z, r2.y, l(1)
xor r2.z, r2.z, r2.y
and r2.yz, r2.yyzy, l(0, 2, 1, 0)
if_nz r2.z
  ishl r4.xyzw, r1.xyzw, l(8, 8, 8, 8)
  and r4.xyzw, r4.xyzw, l(0xff00ff00, 0xff00ff00, 0xff00ff00, 0xff00ff00)
  ushr r5.xyzw, r1.xyzw, l(8, 8, 8, 8)
  and r5.xyzw, r5.xyzw, l(0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff)
  iadd r1.xyzw, r4.xyzw, r5.xyzw
endif 
if_nz r2.y
  ushr r4.xyzw, r1.xyzw, l(16, 16, 16, 16)
  bfi r1.xyzw, l(16, 16, 16, 16), l(16, 16, 16, 16), r1.xyzw, r4.xyzw
endif 
store_raw U0[0].xy, r3.x, r1.xyxx
if_nz r0.x
  store_raw U0[0].xy, r3.y, r1.zwzz
  if_nz r0.y
    iadd r0.x, r0.w, l(16)
    ld_raw r1.xyzw, r0.x, T0[0].xyzw
    if_nz r2.x
      mov r1.xyzw, r1.yxwz
      mov r0.x, l(2)
    else 
      mov r0.x, CB0[0][0].y
    endif 
    ushr r0.y, r0.x, l(1)
    xor r0.y, r0.y, r0.x
    and r0.xy, r0.xyxx, l(2, 1, 0, 0)
    if_nz r0.y
      ishl r2.xyzw, r1.xyzw, l(8, 8, 8, 8)
      and r2.xyzw, r2.xyzw, l(0xff00ff00, 0xff00ff00, 0xff00ff00, 0xff00ff00)
      ushr r4.xyzw, r1.xyzw, l(8, 8, 8, 8)
      and r4.xyzw, r4.xyzw, l(0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff)
      iadd r1.xyzw, r2.xyzw, r4.xyzw
    endif 
    if_nz r0.x
      ushr r2.xyzw, r1.xyzw, l(16, 16, 16, 16)
      bfi r1.xyzw, l(16, 16, 16, 16), l(16, 16, 16, 16), r1.xyzw, r2.xyzw
    endif 
    store_raw U0[0].xy, r3.z, r1.xyxx
    if_nz r0.z
      store_raw U0[0].xy, r3.w, r1.zwzz
    endif 
  endif 
endif 
ret 
// Approximately 99 instruction slots used
